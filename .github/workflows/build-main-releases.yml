---
name: Build Release Packages for Linux (main)
run-name: Building Release Packages for Linux (main)
on:
  push:
    branches: main
    paths-ignore: 
      - '**.md'
      - '.gitignore'
      - '.gitattributes'
jobs:
  build-linux-releases:
    runs-on: ubuntu-latest
    container:
      image: eliaswf/jammy-chromedriver-python-r:latest
    outputs:
      upload_url: ${{ steps.create_prerelease.outputs.upload_url }}
      tag_name:   ${{ steps.create_tag_name.outputs.tag_name }}
    steps:
    - name: Update Git to version 2.18 or higher 
      run: |
        apt-get update
        apt-get install -y git

    - name: Checkout git repository on to Github Actions runner
      uses: actions/checkout@v3
      with:
        path: 'VisualizationLibrary'

    - name: Checkout latest version of VisualizationTools repository (not release)
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.VisualizationTools_DEPLOY_KEY }}
        repository: 'metrc/VisualizationTools'
        ref: main
        path: 'VisualizationTools'
        
    - name: Generate cache key using the number of the month (01 to 12)
      run: |
        date +%m
        echo "month_number=$(date +%m)" >> $GITHUB_ENV

    - name: check runner temp
      run: | 
        echo $RUNNER_TEMP

    - name: Temporarily change ownership for R site library path, so our cache can write to it during a restore
      run: | 
        chown -R $(whoami) /usr/local/lib/R/
        chown -R $(whoami) /usr/lib/R/

    - name: Cache the R site library to speed-up future workflow runs
      uses: actions/cache@v3
      id: cache-R-site-lib
      with:
        key: ${{ env.month_number }}
        path: |
          /usr/local/lib/R/site-library
          /usr/lib/R/site-library

    - name: Restore ownership for R site library path, after cache-write
      run: | 
        chown -R root /usr/local/lib/R/
        chown -R root /usr/lib/R/

    - name: Install R package dependencies for VisualizationTools using Rscript
      run: Rscript -e "install.packages(c('tidyverse', 'janitor', 'kableExtra', 'DiagrammeR', 'DiagrammeRsvg', 'rsvg', 'base64enc', 'VisualizationTools', 'plotly', 'ggplot2', 'scales'), dependencies=TRUE, repos = 'http://cran.us.r-project.org', lib = '/usr/local/lib/R/site-library')"

    - name: Install VisualizationTools Package using RScript from the latest release tag
      working-directory: VisualizationTools
      run: Rscript -e "install.packages('.', repos = NULL, type = 'source', lib = '/usr/local/lib/R/site-library')"

    # Now that we have installed VisualizationTools, we'll install VisualizationLibrary
    - name: Install the VisualizationLibrary package
      working-directory: VisualizationLibrary
      run: Rscript -e "install.packages('.', repos = NULL, type = 'source', lib = '/usr/local/lib/R/site-library')"

    - name: Manually run R CMD Check from the shell
      continue-on-error: true
      working-directory: VisualizationLibrary
      run: R CMD check .

    # Build Linux binary package
    - name: Build platform-specific binary packages for the Analytic Codebase
      working-directory: 'VisualizationLibrary'
      run: R CMD INSTALL -l $RUNNER_TEMP --build .

    # # Retrieve build artifact filenames
    - name: Retrieve package version from DESCRIPTION file and set as env variable
      working-directory: 'VisualizationLibrary'
      run: |
        echo "package_version=$(grep -oP '(?<=Version: )\d+\.\d+\.\d+' DESCRIPTION)" >> $GITHUB_ENV
        echo $(grep -oP '(?<=Version: )\d+\.\d+\.\d+' DESCRIPTION)

    - name: Retrieve binary package filename and set as env variable
      working-directory: 'VisualizationLibrary'
      run: | 
        echo "linux_binary_pkg_filename=$(ls VisualizationLibrary_${{ env.package_version }}_R_*.tar.gz)" >> $GITHUB_ENV
        echo $(ls VisualizationLibrary_${{ env.package_version }}_R_*.tar.gz)
        echo "linux_binary_pkg_filepath=$(realpath $(ls VisualizationLibrary_${{ env.package_version }}_R_*.tar.gz))" >> $GITHUB_ENV
        echo $(realpath $(ls VisualizationLibrary_${{ env.package_version }}_R_*.tar.gz))
    # - name: Retrieve source package filename and set as env variable
    #   working-directory: 'VisualizationLibrary'
    #   run: | 
    #     echo "linux_source_pkg_filename=$(ls VisualizationLibrary_${{ env.package_version }}.tar.gz)" >> $GITHUB_ENV
    #     echo $(ls VisualizationLibrary_${{ env.package_version }}.tar.gz)

    # Generate Release Metadata
    - name: Create autogenerated release tag name
      id: create_tag_name
      run: | 
        # Tag names follow a variant of the SemVer 2.0.0 convention:
        # <major>.<minor>.<patch>-<pre-release>-build-<build>

        if [[ ${{ github.ref_name }} != "main" ]]; then
          # If the branch name is not main, we set a pre-release field in the SemVer
          echo "tag_name=${{ env.package_version }}-${{ github.ref_name }}-build-${{ github.run_number }}" >> "$GITHUB_ENV"
          echo "tag_name=${{ env.package_version }}-${{ github.ref_name }}-build-${{ github.run_number }}" >> "$GITHUB_OUTPUT"
        else
          # Otherwise for main releases on "main", we omit the pre-release field.
          echo "tag_name=${{ env.package_version }}-build-${{ github.run_number }}" >> "$GITHUB_ENV"
          echo "tag_name=${{ env.package_version }}-build-${{ github.run_number }}" >> "$GITHUB_OUTPUT"
        fi
        echo ${{ env.tag_name }}

    - name: Create Release
      if: ${{ github.ref_name }} == "main"
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.tag_name }}
        release_name: Build for branch (${{ github.ref_name }}) on tag ${{ env.tag_name }}.
        body: |
          Automatic release build for ${{ github.ref_name }} branch on tag ${{ env.tag_name }}.
        draft: false
        prerelease: false

    - name: Upload Linux Binary Package
      if: ${{ github.ref_name }} == "main"
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.linux_binary_pkg_filepath }}
        asset_name: Linux-binary-${{ env.linux_binary_pkg_filename }}
        asset_content_type: application/gzip
